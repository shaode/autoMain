/**
 * Created by wb-xiongsongsong on 14-2-14.
 */
var fs = require('fs')
var path = require('path')

var REQUIRE_RE = /"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/(?:\\\/|[^\/\r\n])+\/(?=[^\/])|\/\/.*|\.\s*require|(?:^|[^$])\brequire\s*\(\s*(["'])(.+?)\1\s*\)/g
var SLASH_RE = /\\\\/g

function parseDependencies(code) {
    var ret = []
    code.replace(SLASH_RE, "")
        .replace(REQUIRE_RE, function (m, m1, m2) {
            if (m2) {
                ret.push(m2)
            }
        })

    return ret
}

//入口
exports.start = function *() {

    //开始读取入口文件
    yield exports.read

    //开始修改define
    yield exports.define

    return JSON.stringify(this.moduleCache, undefined, 4)
}

//读取文件
exports.read = function (cb) {
    var self = this

    var keys = Object.keys(self.moduleCache)
    var isAllEnd = true
    if (keys.length > 1) {
        for (var i = 0; i < keys.length; i++) {
            if (self.moduleCache[keys[i]].end) {
                continue
            }
            isAllEnd = false
            self.filePath = self.moduleCache[keys[i]].filePath
            break;
        }
    }


    if (isAllEnd === true && keys.length > 0) {
        cb(null)
        return
    }

    //不能阅读根目录之外的文件
    if (self.filePath.indexOf(self.dirName) !== 0) {
        cb(null, '拒绝访问')
        return;
    }

    fs.lstat(self.filePath, function (err, stat) {
        var cur = self.moduleCache[self.filePath]
        if (stat && stat.isFile()) {
            fs.readFile(self.filePath, function (err, buf) {
                if (cur) {
                    cur.content = buf ? buf.toString() : ''
                    cur.filePath = self.filePath
                    cur.dirPath = path.dirname(self.filePath)
                } else {
                    cur = self.moduleCache[self.filePath] = {
                        content: buf ? buf.toString() : '',
                        filePath: self.filePath,
                        dirPath: path.dirname(self.filePath)
                    }
                }

                if (!cur.module_id) {
                    cur.module_id = self.rootUrl + cur.filePath.substring(self.dirName.length + 1)
                }

                //检查是否有新的文件
                var fileList = parseDependencies(buf.toString())
                for (var j = 0; j < fileList.length; j++) {
                    var _file = path.join(path.dirname(self.filePath), fileList[j]) + '.js'
                    self.moduleCache[_file] = {
                        filePath: _file,
                        require_id: fileList[j],
                        module_id: self.rootUrl + _file.substring(self.dirName.length + 1)
                    }
                    self.requireMap[_file] = fileList[j]
                }

                cur.end = true

                exports.read.call(self, cb)
            })
        } else {
            cur = self.moduleCache[self.filePath] = {
                filePath: self.filePath,
                dirPath: path.dirname(self.filePath),
                end: true
            }
            cur.end = true
            exports.read.call(self, cb)
        }
    })
}


exports.define = function *() {
    var self = this
    Object.keys(self.moduleCache).forEach(function (key) {
        var item = self.moduleCache[key]
        if (!item.content) return;
        item.content = item.content.replace(SLASH_RE, "").replace(REQUIRE_RE, function (m, m1, m2) {
            if (m2) {
                return '\r\nrequire(' + m1 + item.module_id + m1 + ')\r\n'
            } else {
                return m
            }
        })
    })
}