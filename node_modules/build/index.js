var fs = require('fs')
var path = require('path')
var qs = require('querystring')
var grasp = require('grasp')

//入口
exports.start = function *() {
    this.type = path.extname(this.filePath)

    if (yield isFile) {
        //如果不是js文件，则直接返回
        if (/\.(?:js)$/.test(this.filePath.replace(/\?[\s\S]+$/, '')) === false) {
            return fs.createReadStream(this.filePath)
        }

        //开始读取入口文件
        yield exports.read

        //开始修改define
        return yield exports.define
    } else {
        this.status = 404
        return '/*404 Not Found*/'
    }
}

function addJsExtname(file) {
    return file + (path.extname(file) === '.js' ? '' : '.js')
}

function escapeSlash(id) {
    return id.replace(/\\/g, '/').replace(/(?:\\|\/)$/, '')
}

function removeExtraSlash(dir) {
    return dir.replace(/\\+/g, '/')
}

function replaceConfigVars(id) {
    if (!id) return
    if (global.baseVars) {
        Object.keys(global.baseVars).forEach(function (key) {
            id = id.replace('{' + key + '}', global.baseVars[key])
        })
    }
    return id
}

//读取文件
exports.read = function (cb) {
    var self = this

    var keys = Object.keys(self.moduleCache)
    var isAllEnd = true
    if (keys.length > 1) {
        for (var i = 0; i < keys.length; i++) {
            if (self.moduleCache[keys[i]].end || self.moduleCache[keys[i]].isAlias) {
                continue
            }
            isAllEnd = false
            self.filePath = self.moduleCache[keys[i]].filePath
            break;
        }
    }


    if (isAllEnd === true && keys.length > 0) {
        cb(null)
        return
    }

    //不能阅读根目录之外的文件
    //todo:在*inx中，目录名允许大小写，因此此处存在问题，考虑到这种情况比较少见，故暂时不考虑
    if (self.filePath.toLowerCase().indexOf(self.dirName.toLowerCase()) !== 0) {
        cb(null, '拒绝访问')
        return;
    }

    fs.lstat(self.filePath, function (err, stat) {
        var cur = self.moduleCache[self.filePath]
        if (stat && stat.isFile()) {
            fs.readFile(self.filePath, function (err, buf) {
                if (cur) {
                    cur.content = buf ? buf.toString() : ''
                    cur.filePath = self.filePath
                } else {
                    cur = self.moduleCache[self.filePath] = {
                        content: buf ? buf.toString() : '',
                        filePath: self.filePath,
                        isMain: true,
                        mainUrl: 'http://' + self.header.host + self.url
                    }
                }

                if (!cur.module_id) {
                    cur.module_id = escapeSlash(self.rootUrl +
                        removeExtraSlash(path.join('/' + cur.filePath.substring(self.dirName.length)))
                    )
                }

                //检查是否有新的文件
                var list = grasp.search('equery', 'require($id)', buf.toString())
                if (Array.isArray(list)) {
                    if (list.length > 0) cur.moduleCount = list.length
                    list.forEach(function (obj) {
                        obj.arguments.forEach(function (match) {
                            //check alias
                            var isAlias = false
                            if (global.baseAlias[match.value]) {
                                isAlias = true
                                var _file = global.baseAlias[match.value]
                            } else {
                                _file = path.join(path.dirname(self.filePath), addJsExtname(match.value))
                                _file = replaceConfigVars(_file)
                            }
                            //避免循环引用模块导致的死循环解析
                            if (self.moduleCache[_file]) {
                                return
                            }
                            self.moduleCache[_file] = {
                                filePath: _file,
                                isAlias: isAlias,
                                module_id: isAlias ? _file : escapeSlash(self.rootUrl +
                                    removeExtraSlash(path.join('/' + _file.substring(self.dirName.length)))
                                )
                            }
                        })
                    })
                }

                cur.end = true

                exports.read.call(self, cb)
            })
        } else {
            cur = self.moduleCache[self.filePath] = {
                filePath: self.filePath,
                end: true
            }
            cur.end = true
            exports.read.call(self, cb)
        }
    })
}

exports.define = function *() {
    var self = this
    self.moduleBuffer = ''
    Object.keys(self.moduleCache).forEach(function (key) {
        var item = self.moduleCache[key]
        if (!item.content) return;
        var requireReplace = grasp.replace('equery',
            'require($str)',
            'ＳＥＡＪＳＲＥＱＵＩＲＥ___({{_str}})');

        item.content = requireReplace(item.content).join('')
        item.content = item.content.replace(/ＳＥＡＪＳＲＥＱＵＩＲＥ___\(['"]([\s\S]+?)['"]\)/gm, function (m, m1, m2) {
            //check alias
            if (global.baseAlias[m1]) {
                return "require('" + global.baseAlias[m1] + "')"
            } else {
                var id = self.rootProtocol + path.join(path.dirname(item.module_id).substring(self.rootProtocol.length), m1)
                return "require('" + replaceConfigVars(escapeSlash(addJsExtname(id))) + "')"
            }
        })

        var type1 = grasp.search('equery', 'define($fn)', item.content);
        var type2 = grasp.search('equery', 'define($id,$fn)', item.content);
        var type3 = grasp.search('equery', 'define($id,$deps,$fn)', item.content);

        if (item.isMain) {
            item.module_id = item.mainUrl
        }
        var replacer = grasp.replace('equery', 'define($fn)', '\r\n;define("' + item.module_id + '",{{fn}});');

        //check --> define(fn)
        if (type1.length < 1 && type2.length < 1 && type3.length < 1) {
            self.moduleBuffer += '\r\n;define("' + (
                item.isMain
                    ? item.mainUrl
                    : addJsExtname(item.module_id)
                ) + '",function(require,exports,module){\r\n' + item.content + '\r\n});\r\n'
        } else {
            //开始替换
            if (type1.length > 0) {
                var processedCode = replacer(item.content)
                self.moduleBuffer += processedCode.join('')
            } else {
                self.moduleBuffer += item.content
            }
        }
    })

    return yield save
}

function isFile(callback) {
    fs.lstat(this.filePath, function (err, stat) {
        callback(null, stat && stat.isFile())
    })
}

//保存模块
function save(callback) {
    var self = this
    if (qs.parse(self.url.substring(self.url.indexOf('?') + 1)).build === undefined) {
        callback(null, self.moduleBuffer)
        return
    }
    var filePath = path.join(path.dirname(this.mainFilePath),
        path.basename(this.mainFilePath, '.js') + '.min.js')

    fs.writeFile(filePath, this.moduleBuffer, function () {

        //压缩文件
        var spawn = require('child_process').spawn;
        var ls = spawn('node', ['uglifyjs', filePath, '--output', filePath, '--mangle', '--reserved', 'require,exports,module'], {
            cwd: path.join(__baseDirname, 'node_modules/uglify-js/bin')
        })

        ls.stdout.on('data', function (data) {
            console.log(data)
        })

        var errData = []
        ls.stderr.on('data', function (data) {
            errData.push(data)
        })

        ls.on('close', function (code) {
            if (code === 0) {
                fs.readFile(filePath, function (err, buf) {
                    callback(null, buf ? buf.toString() : '/* read file error,' + filePath + ' */')
                })
            } else {
                callback(null, '/*' + errData.join('') + '*/')
            }
        })
    })

}
