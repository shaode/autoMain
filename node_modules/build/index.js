/*
 * Reference https://github.com/seajs/seajs/blob/master/src/util-deps.js#L6
 */
var REQUIRE_RE = /"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/(?:\\\/|[^\/\r\n])+\/(?=[^\/])|\/\/.*|\.\s*require|(?:^|[^$])\brequire\s*\(\s*(["'])(.+?)\1\s*\)/g
var SLASH_RE = /\\\\/g


var fs = require('fs')
var path = require('path')
var qs = require('querystring')

function parseDependencies(code) {
    var ret = []
    code.replace(SLASH_RE, "")
        .replace(REQUIRE_RE, function (m, m1, m2) {
            if (m2) {
                ret.push(m2)
            }
        })

    return ret
}

//入口
exports.start = function *() {
    this.type = path.extname(this.filePath)

    if (yield isFile) {
        //如果不是js文件，则直接返回
        if (/\.(?:js|css)$/.test(this.filePath.replace(/\?[\s\S]+$/, '')) === false) {
            return fs.createReadStream(this.filePath)
        }

        //开始读取入口文件
        //首先记录入口文件
        this.mainFile = addJsExtname(this.filePath)
        yield exports.read

        //开始修改define
        return yield exports.define
    } else {
        this.status = 404
        return '/*404 Not Found*/'
    }
}

function addJsExtname(file) {
    return file + (path.extname(file) === '.js' ? '' : '.js')
}

function escapeSlash(id) {
    return id.replace(/\\/g, '/')
}

function removeExtraSlash(dir) {
    return dir.replace(/\\+/g, '/')
}

//读取文件
exports.read = function (cb) {
    var self = this

    var keys = Object.keys(self.moduleCache)
    var isAllEnd = true
    if (keys.length > 1) {
        for (var i = 0; i < keys.length; i++) {
            if (self.moduleCache[keys[i]].end) {
                continue
            }
            isAllEnd = false
            self.filePath = self.moduleCache[keys[i]].filePath
            break;
        }
    }


    if (isAllEnd === true && keys.length > 0) {
        cb(null)
        return
    }

    //不能阅读根目录之外的文件
    //todo:在*inx中，目录名允许大小写，因此此处存在问题，考虑到这种情况比较少见，故暂时不考虑
    if (self.filePath.toLowerCase().indexOf(self.dirName.toLowerCase()) !== 0) {
        cb(null, '拒绝访问')
        return;
    }

    fs.lstat(self.filePath, function (err, stat) {
        var cur = self.moduleCache[self.filePath]
        if (stat && stat.isFile()) {
            fs.readFile(self.filePath, function (err, buf) {
                if (cur) {
                    cur.content = buf ? buf.toString() : ''
                    cur.filePath = self.filePath
                } else {
                    cur = self.moduleCache[self.filePath] = {
                        content: buf ? buf.toString() : '',
                        filePath: self.filePath
                    }
                }

                if (!cur.module_id) {
                    cur.module_id = escapeSlash(self.rootUrl +
                        removeExtraSlash(path.join('/' + cur.filePath.substring(self.dirName.length)))
                    )
                }

                //检查是否有新的文件
                var fileList = parseDependencies(buf.toString())
                for (var j = 0; j < fileList.length; j++) {
                    var _file = path.join(path.dirname(self.filePath), addJsExtname(fileList[j]))
                    //避免循环引用模块导致的死循环解析
                    if (self.moduleCache[_file]) {
                        continue;
                    }
                    self.moduleCache[_file] = {
                        filePath: _file,
                        module_id: escapeSlash(self.rootUrl +
                            removeExtraSlash(path.join('/' + _file.substring(self.dirName.length)).replace(/\\+/, '/'))
                        )
                    }
                }

                if (fileList.length > 0) cur.moduleCount = fileList

                cur.end = true

                exports.read.call(self, cb)
            })
        } else {
            cur = self.moduleCache[self.filePath] = {
                filePath: self.filePath,
                end: true
            }
            cur.end = true
            exports.read.call(self, cb)
        }
    })
}

exports.define = function *() {
    var self = this
    self.moduleBuffer = ''
    Object.keys(self.moduleCache).forEach(function (key) {
        var item = self.moduleCache[key]
        if (!item.content) return;
        item.content =
            item.content.replace(SLASH_RE, "").replace(REQUIRE_RE, function (m, m1, m2) {
                if (m2) {
                    return m.replace(m2, escapeSlash(addJsExtname(self.rootProtocol
                        + path.join(path.dirname(item.module_id)
                        .substring(self.rootProtocol.length), m2))))
                } else {
                    return m
                }
            })
        self.moduleBuffer += '\r\n;define("' + addJsExtname(item.module_id) + '",function(require,exports,module){\r\n' + item.content + '\r\n});\r\n'
    })

    return yield save
}

function isFile(callback) {
    fs.lstat(this.filePath, function (err, stat) {
        callback(null, stat && stat.isFile())
    })
}

//保存模块
function save(callback) {
    var self = this
    if (qs.parse(self.url.substring(self.url.indexOf('?') + 1)).build === undefined) {
        callback(null, self.moduleBuffer)
        return
    }
    var filePath = path.join(path.dirname(this.mainFilePath),
        path.basename(this.mainFilePath, '.js') + '.min.js')

    fs.writeFile(filePath, this.moduleBuffer, function () {

        //压缩文件
        var spawn = require('child_process').spawn;
        var ls = spawn('node', ['uglifyjs', filePath, '--output', filePath, '--reserved', 'require,exports,module'], {
            cwd: path.join(__baseDirname, 'node_modules/uglify-js/bin')
        })

        ls.stdout.on('data', function (data) {
            console.log(data)
        })

        var errData = []
        ls.stderr.on('data', function (data) {
            errData.push(data)
        })

        ls.on('close', function (code) {
            if (code === 0) {
                fs.readFile(filePath, function (err, buf) {
                    callback(null, buf ? buf.toString() : '/* read file error,' + filePath + ' */')
                })
            } else {
                callback(null, '/*' + errData.join('') + '*/')
            }
        })
    })

}
