/**
 * Created by wb-xiongsongsong on 14-2-14.
 */
var fs = require('fs')
var path = require('path')

var REQUIRE_RE = /"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/(?:\\\/|[^\/\r\n])+\/(?=[^\/])|\/\/.*|\.\s*require|(?:^|[^$])\brequire\s*\(\s*(["'])(.+?)\1\s*\)/g
var SLASH_RE = /\\\\/g

function parseDependencies(code) {
    var ret = []
    code.replace(SLASH_RE, "")
        .replace(REQUIRE_RE, function (m, m1, m2) {
            if (m2) {
                ret.push(m2)
            }
        })

    return ret
}

//入口
exports.start = function *() {
    this.moduleCache = {}
    var content = yield exports.read
    this.fileQueue = []
    var file = parseDependencies(content)
    this.fileQueue = this.fileQueue.concat(file)
    //入口文件读取后，将“根路径”设置为入口文件的路径
    this.dirName = path.dirname(this.filePath)
    yield exports.keepGoing
    return JSON.stringify(this.moduleCache, undefined, 4)
}

exports.keepGoing = function* () {
    var self = this
    for (var i = 0; i < self.fileQueue.length; i++) {
        var obj = self.fileQueue[i];
        self.fileName = obj + '.js'
        yield exports.read
    }
}

//读取文件
exports.read = function *() {
    if (yield exports.isFile) {
        console.log(this.filePath)
        return yield exports.readFile
    } else {
        console.log(this.filePath, 'Not Found')
        return '\r\n/* ' + this.fileName + '404 Not Found */\r\n'
    }
}

//替换文件define
exports.replace = function *() {

}


exports.readFile = function (cb) {
    var self = this
    fs.readFile(this.filePath, function (err, buf) {
        self.moduleCache[self.filePath] = {
            content: buf ? buf.toString() : ''
        }
        cb(null, buf ? buf.toString() : '')
    })
}

//判断是否为一个文件
exports.isFile = function (cb) {
    var self = this
    self.filePath = path.join(self.dirName, self.fileName)
    if (self.moduleCache[self.filePath]) {
        cb(null, false)
        return
    }
    fs.lstat(self.filePath, function (err, stat) {
        cb(null, stat && stat.isFile())
    })
}

